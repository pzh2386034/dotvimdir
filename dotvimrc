set tags=./.tags;,.tags
source ~/.vim/init/init-basic.vim
source ~/.vim/init/init-function.vim
" source ~/.vim/init/init-plugins.vim
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" mattn/emmet-vim " html 代码插件
" othree/html5.vim; hail2u/vim-css3-syntax; ap/vim-css-color;
" pangloss/vim-javascript; maksimr/vim-jsbeautify
" https://github.com/FengShangWuQi/to-vim-tmux-zsh " vim+tmux
" fzf.vim, yuki-yano/fzf-preview.vim
" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim'
Plug 'rhysd/vim-clang-format'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" Using a non-default branch
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Unmanaged plugin (manually installed and updated)
" Plug '~/my-prototype-plugin'
" 异步自动生成tags
Plug 'https://github.com/ludovicchabant/vim-gutentags.git'

" 异步编译运行
Plug 'skywind3000/asyncrun.vim'
" 代码错误检测
Plug 'dense-analysis/ale'
" git状态对比
if has('nvim') || has('patch-8.0.902')
	Plug 'mhinz/vim-signify'
else
	Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'

" 颜色高亮
Plug 'octol/vim-cpp-enhanced-highlight'

" [,]快捷键补充
Plug 'tpope/vim-unimpaired'

Plug 'ycm-core/YouCompleteMe'

Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

Plug 'justinmk/vim-dirvish'

Plug 'diepm/vim-rest-console'

Plug 'mfukar/robotframework-vim'


Plug 'skywind3000/gutentags_plus'
" 提供基于 TAGS 的定义预览，函数参数预览，quickfix 预览
Plug 'skywind3000/vim-preview'

" Git 支持
Plug 'tpope/vim-fugitive'

Plug 'Shougo/echodoc.vim'


Plug 'kergoth/vim-bitbake'

Plug 'itchyny/calendar.vim'

Plug 'jceb/vim-orgmode'

" cs, ysiw; yss:entity line
Plug 'tpope/vim-surround'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-speeddating'
Plug 'suliveevil/utl.vim'

Plug 'preservim/nerdcommenter'

Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

Plug 'mhinz/vim-startify'
Plug 'pangloss/vim-javascript' "; maksimr/vim-jsbeautify
" Plug 'christoomey/vim-tmux-navigator' "vim tmux导航
" Initialize plugin system
Plug 'vim-autoformat/vim-autoformat'
call plug#end()
autocmd FileType apache setlocal commentstring=#\ %s
autocmd FileType java,c,cpp,hpp,h set commentstring=//\ %s
autocmd FileType python,shell,coffee set commentstring=#\ %s
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']




" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_extra_args += ['--langmap=c++:+.cxx']

" ctags -R  --c++-kinds=+px --fields=+niazS --extra=+q --c-kinds=+px
" 检测 ~/.cache/tags 不存就新建
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

function! Bitbake_compile()
	let command_fmt = 'bitbake %s'
	let initial_command = Findroot(1)
	let  module = escape(fnamemodify(initial_command, ':t'), ' ')
	let command = printf(command_fmt, module)
	return command
endfunc
" command! -bang -nargs=*  Srg call RipgrepFzfself(<q-args>, <bang>0)

noremap cc :<C-U><C-R>=printf("AsyncRun %s", Bitbake_compile())<CR>
noremap cC :<C-U><C-R>=printf("AsyncRun!  %s", Bitbake_compile())<CR>
noremap cp :<C-U><C-R>=printf("!scp  %s/oe-workdir/package/usr", Findroot(1))<CR>
" ===================== asyncrun ===========================
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1


" 编译当前文件
nnoremap <silent> <F9> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" 执行编译结果, raw表示输出不用匹配错误检测模版，直接原始输出到quickfix窗口
nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" 编译整个项目
" nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
nnoremap <silent> <F8> :AsyncRun -cwd=<root> -raw make run <cr>
nnoremap <silent> <F6> :AsyncRun -cwd=<root> -raw make test <cr>


" ===================== ale ===========================
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++19'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta
" ===================== ale end ===========================

" ===================== signify ===========================
" 强制显示侧边栏
" set signcolumn=yes
" ===================== signify end ===========================

" ===================== youCompleteMe ===========================
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
nnoremap gl :YcmCompleter GoToReferences<CR>
nnoremap gc :YcmCompleter GoToCallers<CR>
set completeopt=menu,menuone

noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
"----------------------------------------------------------------------
" echodoc：搭配 YCM/deoplete 在底部显示函数参数
"----------------------------------------------------------------------
"	set noshowmode
let g:echodoc#enable_at_startup = 1
" ===================== youCompleteMe end ===========================

" =======================LeaderF===================================
let g:findroot_not_for_subdir = 0 " for findRoot

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap ,r :LeaderfMru<cr>
noremap ,f :LeaderfFunction<cr>
noremap ,b :LeaderfBuffer<cr>
noremap ,t :LeaderfTag<cr>
noremap ,s :LeaderfLine<cr>
noremap ,c :<C-U><C-R>=printf("Leaderf! rg -S -e %s -i", expand("<cword>"))<CR>
noremap ,a :<C-U><C-R>=printf("Leaderf! rg -S -e  %s  %s",expand("<cword>"), Findroot(1))<CR>
noremap ,o :<C-U><C-R>=printf("Leaderf! rg -S  ~/org -e %s",expand("<cword>"))<CR>
" :help :<cWORD>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
" =======================LeaderF end===================================
" =======================vim-dirvish================================
" :map <F8> :vertical wincmd f<CR>  wincmd:<c-w>
"----------------------------------------------------------------------
" Dirvish 设置：自动排序并隐藏文件，同时定位到相关文件
" 这个排序函数可以将目录排在前面，文件排在后面，并且按照字母顺序排序
" 比默认的纯按照字母排序更友好点。
"----------------------------------------------------------------------
function! s:setup_dirvish()
	if &buftype != 'nofile' && &filetype != 'dirvish'
		return
	endif
	if has('nvim')
		return
	endif
	" 取得光标所在行的文本（当前选中的文件名）
	let text = getline('.')
	if ! get(g:, 'dirvish_hide_visible', 0)
		exec 'silent keeppatterns g@\v[\/]\.[^\/]+[\/]?$@d _'
	endif
	" 排序文件名
	exec 'sort ,^.*[\/],'
	let name = '^' . escape(text, '.*[]~\') . '[/*|@=|\\*]\=\%($\|\s\+\)'
	" 定位到之前光标处的文件
	call search(name, 'wc')
	noremap <silent><buffer> ~ :Dirvish ~<cr>
	noremap <buffer> % :e %
endfunc

augroup MyPluginSetup
	autocmd!
	autocmd FileType dirvish call s:setup_dirvish()
augroup END

" =======================vim-dirvish end============================
" =======================vim-rest-console===========================
let g:vrc_curl_opts = {
			\ '--connect-timeout' : 10,
			\ '-k': '',
			\}
" =======================vim-rest-console end=======================
" =======================ultisnips===========================

let g:UltiSnipsExpandTrigger="<nop>"
let g:ulti_expand_or_jump_res = 0
function! <SID>ExpandSnippetOrReturn()
	let snippet = UltiSnips#ExpandSnippetOrJump()
	if g:ulti_expand_or_jump_res > 0
		return snippet
	else
		return "\<CR>"
	endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=<SID>ExpandSnippetOrReturn()<CR>" : "\<CR>"
" =======================ultisnips end=======================
" =======================vim-org===========================
let g:org_agenda_files=['~/org/*.org']

" =======================vim-org end=======================
" =======================vim-gitgutter===========================
command! Gqf GitGutterQuickFix | copen
noremap  guz :GitGutterFold<CR>
" =======================vim-gitgutter end=======================
" =======================fzf===========================
set rtp+=/opt/homebrew/opt/fzf

let g:fzf_buffers_jump = 1
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']
let g:fzf_command_prefix = 'Fzf'
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'
let g:fzf_commands_expect = 'alt-enter,ctrl-x'
" v:oldfiles and open buffers
noremap ff :FzfFiles<cr>
noremap fF :FzfFiles!<cr>
imap <c-x><c-f> :FzfHistory<cr>
" search history
noremap f/ :FzfHistory/<cr>
" command history
noremap f; :FzfHistory:<cr>
noremap fb :FzfBuffers<cr>
" search lines in all buffers
noremap fbl :FzfLines<cr>
" search lines in current buffers
noremap fl :FzfBLines<cr>
noremap fr :FzfMarks<cr>
noremap fw :FzfWindows<cr>
noremap fs :FzfSnippets<cr>
noremap fg :FzfCommits<cr>
noremap fc :FzfCommands<cr>
noremap fh :FzfHelptags<cr>
noremap fm :FzfMaps<cr>



noremap fl :<C-U><C-R>=printf("FzfBLines %s",expand("<cword>"))<CR>
" Mapping selecting mappings
" Insert mode completion
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
			\ 'prefix': '^.*$',
			\ 'source': 'rg -n ^ --color always',
			\ 'options': '--ansi --delimiter : --nth 3..',
			\ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

function! s:make_sentence(lines)
	return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
endfunction
" insert mode word search and complete
inoremap <expr> <c-x><c-s> fzf#vim#complete({
			\ 'source':  'cat /usr/share/dict/words',
			\ 'reducer': function('<sid>make_sentence'),
			\ 'options': '--multi --reverse --margin 15%,0',
			\ 'left':    20})


"command! -bang -nargs=* Rg
			"\ call fzf#vim#grep(
			"\   'rg --column --line-number --no-heading --color=always  --smart-case  '.shellescape(<q-args>), 1,
			"\   <bang>0 ? fzf#vim#with_preview('right:60%')
			"\           : fzf#vim#with_preview('right:50%:hidden', '?'),
			"\   <bang>0)

"noremap ,a :<C-U><C-R>=printf("Leaderf! rg -S -e  %s  %s",expand("<cword>"), Findroot(1))<CR>
function! RipgrepFzfself(query, fullscreen)
	let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case  %s %s'
	if &filetype ==# 'c' || &filetype ==# 'cpp'
		let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -g '.'!test'.' -tcpp -tc %s %s'
	endif
	let initial_command = printf(command_fmt, shellescape(a:query), Findroot(1))
	echom initial_command
	call fzf#vim#grep(
				\   initial_command,
				\   1,
				\   a:fullscreen ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:70%')
				\           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
				\   a:fullscreen
				\ )
endfunction
" /opt/nvme/zeuspan/openbmc/build/workspace/sources/phosphor-psu-software-manager
" noremap ct :<C-U><C-R>=printf("call Load_tag('%s')" , expand("<cword>"))<CR>
command!  -nargs=*  Searchtags call Load_tag(<q-args>)
noremap ct :<C-U><C-R>=printf("Searchtags " )<CR>
" ===================== tag===========================

command! -bang -nargs=*  Srg call RipgrepFzfself(<q-args>, <bang>0)

noremap fA :<C-U><C-R>=printf("Srg  %s",expand("<cword>"))<CR>
noremap fa :<C-U><C-R>=printf("Srg!  %s",expand("<cword>"))<CR>
"noremap ft :<C-U><C-R>=printf("Srg!  %s",expand("<cword>"))<CR>

command! -bang -nargs=* Rgorg
			\ call fzf#vim#grep(
			\   "rg --column --line-number  --no-heading  --color=always  --smart-case ".shellescape(<q-args>)." ~/org",
			\   1,
			\   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:60%')
			\           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:60%', '?'),
			\   <bang>0
			\ )

nmap ga :execute "Rg " . '\b' . expand('<cword>') . '\b'<cr>
"noremap fc :<C-U><C-R>=printf("Leaderf! rg -S -e %s -i", expand("<cword>"))<CR>
noremap fo :<C-U><C-R>=printf("Rgorg   %s",expand("<cword>"))<CR>
noremap ,o :<C-U><C-R>=printf("Rgorg!  %s",expand("<cword>"))<CR>
" source ~/.vim/init/init_fzf.vim
"=======================fzf end=======================
"=======================vim-clang-format start=======================
let g:clang_format#style_options = {
			\ "AccessModifierOffset" : -4,
			\ "AllowShortIfStatementsOnASingleLine" : "true",
			\ "AlwaysBreakTemplateDeclarations" : "true",
			\ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
"=======================vim-clang-format end=======================
"=======================autoformat end=======================
nnoremap cf :Autoformat<CR>
autocmd FileType not c,cpp,objc nnoremap <buffer>cf :<C-u>ClangFormat<CR>
autocmd FileType not c,cpp,objc vnoremap <buffer>cf :ClangFormat<CR>
"=======================autoformat end=======================
noremap gt :G<cr>
" autocmd VimEnter * edit ~/org/test.org
inoremap <c-b> <home>
inoremap <c-e> <end>
inoremap <c-d> <del>
inoremap <c-_> <c-k>

cnoremap <c-h> <left>
cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-l> <right>
cnoremap <c-b> <home>
cnoremap <c-e> <end>
cnoremap <c-f> <c-d>
cnoremap <c-b> <left>
cnoremap <c-d> <del>
cnoremap <c-_> <c-k>
